// TOP Web Framework 
// Form Style Sheets : TOP TextField, TextArea, Checkbox and Radiobutton TOP Image Button (Base Bootstrap : http://getbootstrap.com)
// Base style Sheets Less File version 1.0.1

top-textfield::shadow input[type="text"], top-textfield::shadow input[type="password"]{
  display: inline-block;
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: @padding-base-vertical @padding-base-horizontal;
  font-size: @font-size-base;
  line-height: @line-height-base;
  color: @input-color;
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid @input-border;
  border-radius: @input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  .box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
  .transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");

  // Customize the `:focus` state to imitate native WebKit styles.
  .form-control-focus();

  // Placeholder
  .placeholder();

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: @input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
  }

  &[disabled],
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }

}
// Textarea Style sheetes
top-textarea::shadow textarea{
  display: inline-block;
  height: auto; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: @padding-base-vertical @padding-base-horizontal;
  font-size: @font-size-base;
  line-height: @line-height-base;
  color: @input-color;
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid @input-border;
  border-radius: @input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  .box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
  .transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");

  // Customize the `:focus` state to imitate native WebKit styles.
  .form-control-focus();

  // Placeholder
  .placeholder();

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: @input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
  }

  &[disabled],
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }

}



// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

top-checkbox::shadow  {
      position: relative;
      display: block;
      margin-top: 10px;
      margin-bottom: 10px;
    
      label {
        display: inline-block;
        max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
        min-height: @line-height-computed; // Ensure the input doesn't jump when there is no text
        padding-left: 20px;
        margin-bottom: 0;
        font-weight: normal;
        cursor: pointer;
        vertical-align: middle;
        &.disabled,
        &[disabled] {
                    cursor: @cursor-disabled;
                    .opacity(.65);
                    .box-shadow(none);
         }
      }
      
      input[type="checkbox"]{
        margin: 4px 0 0;
        line-height: normal;
        margin-left: -20px;
        margin-top: 4px \9;
        vertical-align: middle;
        position: relative;
        bottom : 1px;
      }
  
      // Focus for file, radio, and checkbox
     input[type="checkbox"]:focus {
       .tab-focus();
     }
    
         
      input[type="checkbox"]:active{
         .tab-focus();
      }

     
      input[type="checkbox"]:hover{
         .tab-focus();
      }
      
      input[type="checkbox"]:checked{
         .tab-focus();
      }
  
  
  
  
}


top-radiobutton::shadow {
     position: relative;
      display: block;
      margin-top: 10px;
      margin-bottom: 10px;
    
      label {
        display: inline-block;
        max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
        min-height: @line-height-computed; // Ensure the input doesn't jump when there is no text
        padding-left: 20px;
        margin-bottom: 0;
        font-weight: normal;
        cursor: pointer;
         &.disabled,
        &[disabled] {
                    cursor: @cursor-disabled;
                    .opacity(.65);
                    .box-shadow(none);
         }
         
      }
    
      input[type="radio"]{
         margin: 4px 0 0;
         line-height: normal;  
         position: absolute;
         margin-left: -20px;
         margin-top: 4px \9;
         vertical-align: middle;
         position: relative;
         bottom : 1px;
       
         
      }
      
      input[type="radio"]:focus{
         .tab-focus();
      }
      
      input[type="radio"]:active{
         .tab-focus();
      }

     
      input[type="radio"]:hover{
         .tab-focus();
      }
        
      input[type="radio"]:checked{
         .tab-focus();
      }        


}


// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.


top-checkbox::shadow input[type="radio"],
top-radiobutton::shadow input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }
}
// These classes are used on elements with <label> descendants
top-checkbox .disabled::shadow div,
top-radiobutton .disabled::shadow div {
    label {
      cursor: @cursor-disabled;
    }

}

